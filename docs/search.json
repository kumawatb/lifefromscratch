[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Life from Scratch Development Log",
    "section": "",
    "text": "Introduction\nThis book is a development log for the “Life from Scratch” (LfS) project that started as a part of the CMPLXSYS 530 class at University of Michigan. The following chapters detail the initial proposal and final paper for the class, along with further updates on the development of this program after the course concluded.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "Project Proposal",
    "section": "",
    "text": "Model Proposal for Life from Scratch\nBhaskar Kumawat",
    "crumbs": [
      "Project Proposal"
    ]
  },
  {
    "objectID": "proposal.html#model-proposal-for-life-from-scratch",
    "href": "proposal.html#model-proposal-for-life-from-scratch",
    "title": "Project Proposal",
    "section": "",
    "text": "Course ID: CMPLXSYS 530\nCourse Title: Computer Modeling of Complex systems\nTerm: Winter, 2025",
    "crumbs": [
      "Project Proposal"
    ]
  },
  {
    "objectID": "proposal.html#overview",
    "href": "proposal.html#overview",
    "title": "Project Proposal",
    "section": "Overview",
    "text": "Overview\n\nGoal\nI wish to model the origin of self-replication in a 2D world consisting of atoms that move and bond with each other based on some physical and chemical rules. My goal for this class project would be to get any sort of self-replication in this system after millions of time-steps, but I wish to extend it to get Replication Involving Replicable Imperfections (RIRI). RIRI is characterised by molecules (i.e. groups of bonded atoms) creating robust copies while also copying any errors that may have appeared previously in the process (Benner 2014).\n\n\nRationale\nOut of all possible chemistries (set of bonding rules between species of atoms) that can exist, only some are likely to give rise to self-replicating molecules. Further, the environmental conditions (other atoms in the surroundings, temperature etc.) can vitally affect whether a chemistry is able to sustain self-replication. This project aims to explore the conditions that are required for self-replication to arise in a simple physical system, given arbitrary interaction rules and environments. I believe that a 2D world consisting of atoms that follow some physics-y rules (eg. diffusion and collisions) should be sufficient to observe these phenomena. Indeed, simpler, yet similar grid-based simulations have shown this “origin of self-replication” for one particular set of rules (Hutton 2002). However, I wish to test this for a large number of randomly generated chemistries to test some general hypothesis about origin of life.\n\n\nMain Micro-level Processes and Macro-level Dynamics of Interest\nThe simulation world that I’m building consists of a 2D plane over which a large number of circular “atom” agents reside. Each atom has a species and a state (both being integer values between 0 and 255). The main processes that these atoms undergo and the expected emergent dynamics are as follows:\nMicro-level processes\n\nAtomic Diffusion: Each atom performs a random 2D motion similar to a Brownian particle in a viscous fluid.\nAtomic Collisions: Atoms are solid bodies and collide with each other when they come in contact.\nBonding & bond-breaking: The program allows the user to specify any chemistry in terms of creation and decomposition of bonds between atoms. Bonds are created and broken probabilistically based on collisions. If two atoms of given species and state (as specified by the chemistry) collide, they can form a bond with some probability. On the other hand, if two atoms of given species and state (also specified in the chemistry) are already bonded, they may break with some probability.\n\nMacro-level/emergent dynamics\n\nSelf-replication: Self-replication is described as a process where groups of atoms (or molecules) are able to sustain continual creation of self-similar copies in the simulation world. Previous work has shown this is indeed possible in a similar system, but only for a very specific set of bonding rules (Hutton 2002).\nEvolution: Evolution is the process by which these molecules change as they self-replicate, but in a way that these errors are retained in future replications. Thus, RIRI (Replication involving replicable imperfections) is an important requirement for us to observe evolution in this system (Benner 2014; Fontana and Schuster 1998).",
    "crumbs": [
      "Project Proposal"
    ]
  },
  {
    "objectID": "proposal.html#model",
    "href": "proposal.html#model",
    "title": "Project Proposal",
    "section": "Model",
    "text": "Model\nThe model consists of a 2D plane with circular atoms that move around and collide with each other. Collisions can lead to “reactions” where two atoms (assuming they are compatible) can bond with each other to form a molecule. Molecules can also decompose into atoms based on the reactions that are allowed. The set of reactions being used for a given simulation is called a “chemistry”. The following diagram shows an example chemistry and the resulting simulation world at a particular time.\n\n\n\n\n\n\nFigure 1: Schematic of the simulation world and the flow of the model. Colors of the atoms denote their species and the integer label denotes their state. States can change during reactions but the species is invariant.\n\n\n\n\n1) Environment\nThe will have a finite, continuous 2D space with reflecting boundaries (i.e. walls). For now, I’m keeping the temperature constant across the world, but I envision having the temperature as a continuous function over the simulation environment. I also plan to add some sources and sinks in the world for atoms to enter and leave the system, thus allowing some sort of “selection” to emerge naturally.\n\n\n2) Agents\nThe agents are circular “atoms” in a 2D world. All agents are the same size and have both a position in the world and a velocity (both of which are 2-dimensional float vectors). Each atom also has a “species” and a “state” property, both of which are integral values between 0 and 255. The species of an atom remains constant throughout the simulation but the state can change during reactions. Atoms diffuse through the world performing a random walk and can react with other atoms when they collide. These reactions can either form a “bond” between atoms, joining them together as they move around the world, or simply change their state without bonding. Bonded atoms (a molecule) can also decompose into their constituents. Interactions are entirely dependent on collisions and thus on spatial proximity between the atoms.\n\n\n3) Model Scheduling\nA schematic of the model schedule is shown in figure Figure 1. The entire setup can be essentially divided into four parts.\n\nInitialization: Here, the program initializes the parameters and chemistries required for the simulation. It also generates a random initial state for the system based on a random number seed and the initial number of atoms (provided as parameters).\n\nThe following steps are repeated until the user ends the simulation:\n\nDiffusion: Here, each atom is assigned a random velocity in any direction (with magnitude proportional the the temperature parameter). Then, the simulation is progressed by a single time-step (of length \\(dt\\)) so the velocity change appears as a displacement of the atoms.\nResolve collisions/bonds: In this step, the simulation takes note of all collisions (overlapping atoms) and bond extensions and tries to resolve them by moving the atoms by some computed distance. This step is performed 8x times because sometimes resolving collision between two atoms may create other collisions in the world.\nReaction: Here, all atom pairs that collided with each other are checked for a “reaction” by looking their species/states up in the user specified chemistry. If two atoms can react, they are either bonded or their state is changed probabilistically based on the reaction probability (also specified by the user). Bonded atoms are also checked for decomposition.\n\n\n\n4) Model Parameters and Initialization\nThe main user defined parameters (apart from the chemistry) are as follows:\n\nsize_x, size_y: Size of the simulation world in arbitrary units.\ndiameter: Diameter of an atom\ntemperature: Temperature of the world, determines how random an atoms’ movement is.\ninit_atoms: Initial number of atoms in the world.\n\nThe model is initialized by first obtaining these parameters from the user through the command line. Then, the program randomly samples init_atoms number of locations in the simulation world to create the initial world state.\n\n\n5) Assessment and Outcome Measures\nFor the purpose of quantifying self-replication, I will output all molecules and their numbers that are present in the system every few time-steps. These numbers can be simply plotted over time to check if there is a sudden explosive increase in the population of a particular molecule, indicating self-replication.\nI will perform a similar analysis with a lot of randomly generated chemistries to find chemistries that allow self-replication. Then, I will narrow down on chemistries where the succesion between replicating molecules is such that it qualifies for the definition of replication with replicable imperfections: i.e., new self-replicators are similar to old self-replicators but are also stable and do not revert to an earlier state.\n\n\n6) Parameter Exploration\nThe most interesting parameter to vary here would be temperature, as it allows an increase in the possiblity of chance encounters between far apart molecules and atoms. However, instead of varying the parameter between simulations, I might opt for a larger world with heterogeneous temperature at different points in the world. I hypothesis that a more “hetergeneous” world such as this would lead to self-replication faster than a homogeneous temperature simulation.",
    "crumbs": [
      "Project Proposal"
    ]
  },
  {
    "objectID": "proposal.html#questions-and-challenges",
    "href": "proposal.html#questions-and-challenges",
    "title": "Project Proposal",
    "section": "Questions and challenges",
    "text": "Questions and challenges\nQuestion\n\nRigid vs flexible bonds: There are essentially two ways to create a bond between atoms. In the first case, the atoms are allowed to rotate around the bond and a large molecule can essentially flop around in the world and does not have a rigid 2D structure. On the other hand, a rigid bond restricts the rotation of the atoms and fixes the structure of the molecule to what it was when the bond was formed. I feel like the flexible case would be more interesting (both visually and in terms of allowing self-replication) but I’m not sure if that’s realistic (because real molecules are actually somewhat rigidly bonded to each other).\n\nChallenge\n\nMoving to a larger simulation: According to my tests, the simulation can support around 100,000 atoms at decent speed on a somewhat powerful personal computer. I would like to scale this further and go upto maybe 1-10 million particles. I’m not sure about the techniques I could use for this, maybe performing the simulation on a GPU?",
    "crumbs": [
      "Project Proposal"
    ]
  },
  {
    "objectID": "proposal.html#code",
    "href": "proposal.html#code",
    "title": "Project Proposal",
    "section": "Code",
    "text": "Code\nThe code is available in the github repository here (branch bevylife). The code is written in Rust and uses the Bevy game engine and the Rapier physics library for improved performance (I tried writing these from scratch first but it’s both time consuming and not as performative as using a pre-built engine). I have implemented atomic diffusion and collisions as of now. The collisions are also reported as events that I can use to make bonds. Rigid bonding (where the bonds are NOT “floppy”) was easy to implement but is not as interesting. I’m currently trying to implement “floppy” bonds (a revolute joint). Pre-built binaries to run the current simulation on different platforms are available here:\n\nLinux: 64-bit\nWindows: 64-bit\nMacOS: M-series Processors (eg. M1-M4), Intel\n\n\nIf you’re not sure which one to get, just choose the first link for your operating system. If that doesn’t work, you can try the next one. Please have a look at the release page here for instructions on running the program.",
    "crumbs": [
      "Project Proposal"
    ]
  },
  {
    "objectID": "proposal.html#references",
    "href": "proposal.html#references",
    "title": "Project Proposal",
    "section": "References",
    "text": "References\n\n\nBenner, Steven A. 2014. “Paradoxes in the Origin of Life.”\nOrigins of Life and Evolution of the Biosphere: The Journal of the\nInternational Society for the Study of the Origin of Life 44\n(December): 339–43.\n\n\nFontana, W, and P Schuster. 1998. “Continuity in Evolution: On the\nNature of Transitions.” Science (New York, N.Y.) 280\n(May): 1451–55.\n\n\nHutton, Tim J. 2002. “Evolvable Self-Replicating Molecules in an\nArtificial Chemistry.” Artificial Life 8: 341–56.",
    "crumbs": [
      "Project Proposal"
    ]
  }
]